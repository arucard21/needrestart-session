#!/usr/bin/perl

# needrestart-x11 - X11 frontend for needrestart
#
# Authors:
#   Thomas Liske <thomas@fiasko-nw.net>
#
# Copyright Holder:
#   2014 (C) Thomas Liske [http://fiasko-nw.net/~thomas/]
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this package; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#

use warnings;
use strict;

use NeedRestart::Utils;
use Wx qw(wxDefaultPosition wxDefaultSize wxPD_AUTO_HIDE wxPD_ELAPSED_TIME wxLC_REPORT wxALL wxLIST_AUTOSIZE wxHORIZONTAL wxALIGN_CENTER wxEXPAND wxID_CLOSE wxID_REFRESH wxUSER_ATTENTION_INFO wxST_ELLIPSIZE_END);
use Wx::Event qw(EVT_BUTTON EVT_LIST_ITEM_ACTIVATED EVT_CLOSE);
use List::Util qw(max);
use Proc::ProcessTable;
use Cwd qw(realpath);

my $app = Wx::SimpleApp->new;
$app->SetAppName('needrestart-x11');

my $pd = Wx::ProgressDialog->new("Scanning...", "", 2, undef, wxPD_ELAPSED_TIME | wxPD_AUTO_HIDE);
my $frame = Wx::Frame->new(undef, -1, 'needrestart-x11');

# get user processes required to be restarted
my %fnames;
my $fh = nr_fork_pipe(0, qw(needrestart -b));
$pd->Update(1, "processes");
while(<$fh>) {
    chomp;

    next unless(/^NEEDRESTART-PID: (.+)=([\d,]+)$/);

    @{ $fnames{$1} } = split(/,/, $2);
    $pd->Pulse;
}
close($fh);

# get list of pid => window mapping
$pd->Update(2, "windows");
my %windows;
my %wtitles;
$fh = nr_fork_pipe(0, qw(wmctrl -l -p));
while(<$fh>) {
    chomp;

    next unless(/^(0x[\da-f]+) +-?\d+ +(\d+) +(.+)/);

    $windows{$2} = $1;
    $wtitles{$2} = $3;
}
close($fh);


# map $pid => [$fname, $win]
my %alist;
my %wlist = map {
    my $fname = $_;

    map {
	my $p = $_;

	if(grep { $_ == $p } keys %windows) {
	    ($p, [$fname, $windows{$p}]);
	}
	else {
	    $alist{$p} = $fname;
	    ();
	}
    } @{$fnames{$fname}}
} keys %fnames;

# TEST: bring any affected program's window to front
#while (my($pid, $fname) = each(%fnames)) {
#    next unless(exists($windows{$pid}));
#    system(qw(wmctrl -i -a), $windows{$pid});
#}

my $sWindows = Wx::StaticText->new($frame, -1, q(The following of your running applications are using obsolete libraries. Double click brings the application's window to front.), wxDefaultPosition, wxDefaultSize, wxST_ELLIPSIZE_END);
my $lWindows = Wx::ListCtrl->new($frame, -1, wxDefaultPosition, [-1,-1], wxLC_REPORT);
$lWindows->InsertColumn(0, "Application");
$lWindows->InsertColumn(1, "Title");
my $pos = 0;
my %wpwin;
while (my($pid, $data) = each(%wlist)) {
    my ($fname, $win) = @{$data};

    $lWindows->InsertStringItem($pos, $fname);
    $lWindows->SetItem($pos, 1, $wtitles{$pid});
    $wpwin{$pos++} = $win;
}
$lWindows->SetColumnWidth(0, wxLIST_AUTOSIZE);
$lWindows->SetColumnWidth(1, wxLIST_AUTOSIZE);
EVT_LIST_ITEM_ACTIVATED($frame, $lWindows, \&OnWinDClick);

my $sApps = Wx::StaticText->new($frame, -1, 'Some background processes need to be restarted manually. You might need to logout and login:', wxDefaultPosition, wxDefaultSize, wxST_ELLIPSIZE_END);
my $lApps = Wx::ListCtrl->new($frame, -1, wxDefaultPosition, [-1,-1], wxLC_REPORT);
$lApps->InsertColumn(0, "PID");
$lApps->InsertColumn(1, "Session");
$lApps->InsertColumn(2, "Application");
$pos = 0;
my %ptable = map {$_->pid => $_} @{ new Proc::ProcessTable(enable_ttys => 1)->table };
while (my($pid, $fname) = each(%alist)) {
    my $session = '?';
    if(exists($ptable{$pid})) {
	if($ptable{$pid}->{ttydev} ne '') {
	    $session = realpath( $ptable{$pid}->{ttydev} );
	}
	elsif(open(HCGROUP, qq(/proc/$pid/cgroup))) {
	    map {
		chomp;
		my ($id, $type, $value) = split(/:/);
		$session = "#$2" if($type eq q(name=systemd) && $value =~ m@/user-(\d+).slice/session-(\d+).scope@);
	    } <HCGROUP>;
	    close(HCGROUP);
	}
    }

    $lApps->InsertStringItem($pos, $pid);
    $lApps->SetItem($pos, 1, $session);
    $lApps->SetItem($pos++, 2, $fname);
}
$lApps->SetColumnWidth(0, wxLIST_AUTOSIZE);
$lApps->SetColumnWidth(1, wxLIST_AUTOSIZE);
$lApps->SetColumnWidth(2, wxLIST_AUTOSIZE);

my $bsButtons = Wx::BoxSizer->new(wxHORIZONTAL);
my $bRecheck = Wx::Button->new($frame, wxID_REFRESH);
EVT_BUTTON($frame, $bRecheck, \&OnRecheck);
my $bClose = Wx::Button->new($frame, wxID_CLOSE);
EVT_BUTTON($frame, $bClose, \&OnClose);

my $fgs = Wx::FlexGridSizer->new(5, 1, 0, 0);
$fgs->Add($sWindows, 0, wxEXPAND);
$fgs->Add($lWindows, 0, wxEXPAND);
$fgs->Add($sApps, 0, wxEXPAND);
$fgs->Add($lApps, 0, wxEXPAND);
$bsButtons->Add($bRecheck, 0, wxALL, 4);
$bsButtons->Add($bClose, 0, wxALL, 4);
$fgs->Add($bsButtons, 0, wxALIGN_CENTER);

$fgs->AddGrowableCol(0);
$fgs->AddGrowableRow(3);
$fgs->AddGrowableRow(3);

$frame->SetSizerAndFit($fgs);
$frame->SetAutoLayout(1);
$frame->Centre();

EVT_CLOSE($frame, \&OnClose);

$frame->Show;
$frame->RequestUserAttention(wxUSER_ATTENTION_INFO);
$app->MainLoop;

# make selected window active
sub OnWinDClick {
    my ($frame, $event) = @_;
    system(qw(wmctrl -i -a), $wpwin{$event->GetIndex});
}

sub OnRecheck {
    print STDERR "recheck\n";
}

sub OnClose {
    $app->ExitMainLoop;
}
