#!/usr/bin/perl -T

# needrestart-dbus - DBus interface for needrestart
#
# Authors:
#   Thomas Liske <thomas@fiasko-nw.net>
#
# Copyright Holder:
#   2014 (C) Thomas Liske [http://fiasko-nw.net/~thomas/]
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this package; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#

use Net::DBus;
use Net::DBus::Service;
use Net::DBus::Reactor;
use Sys::Syslog qw(:standard :macros);

use warnings;
use strict;

BEGIN {
    openlog(q(needrestart-dbus), 'pid', LOG_DAEMON);
}

END {
    syslog(LOG_INFO, q(terminated));
}

sub WARN_handler {
    my $signal = shift;
    syslog(LOG_WARNING, q(%s), $signal);
}

sub DIE_handler {
    my $signal = shift;
    syslog(LOG_ERR, q(%s), $signal);
}

$SIG{__WARN__} = q(WARN_handler);
$SIG{__DIE__}  = q(DIE_handler);

syslog(LOG_INFO, q(needrestart-dbus %s launched), $NeedRestart::VERSION);

package NeedRestart::DBus;

use NeedRestart;
use Net::DBus::Exporter qw(net.ibh.needrestart.system);
use Sys::Syslog qw(:standard :macros);
use base qw(Net::DBus::Object);

sub new {
    my $class = shift;
    my $service = shift;

    my $self = $class->SUPER::new($service, "/net/ibh/needrestart/system");
    bless $self, $class;

    syslog(LOG_INFO, q(new instance));

    return $self;
}

dbus_method(q(GetImplementation), [], [[q(struct), q(string), q(string)]]);
sub GetImplementation {
    syslog(LOG_INFO, q(query));

    my $self = shift;
    my $message = shift;

    return [q(needrestart), $NeedRestart::VERSION];
}



package main;

my $bus = Net::DBus->system;
NeedRestart::DBus->new( $bus->export_service('net.ibh.needrestart.system') );
syslog(LOG_INFO, q(entering event loop...));
my $reactor = Net::DBus::Reactor->main;
$reactor->run();
syslog(LOG_INFO, q(leaving event loop));
